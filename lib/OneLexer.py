# Generated from D:/Coding/python/compiler/One.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,230,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,18,4,18,130,8,18,11,18,12,18,131,1,
        18,1,18,1,19,3,19,137,8,19,1,19,1,19,3,19,141,8,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,3,20,163,8,20,1,21,1,21,1,21,1,21,3,21,169,8,
        21,1,22,1,22,1,22,1,22,1,22,3,22,176,8,22,1,23,1,23,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,191,8,25,1,26,4,
        26,194,8,26,11,26,12,26,195,1,26,1,26,4,26,200,8,26,11,26,12,26,
        201,3,26,204,8,26,1,27,1,27,1,27,5,27,209,8,27,10,27,12,27,212,9,
        27,1,27,1,27,1,28,1,28,1,28,5,28,219,8,28,10,28,12,28,222,9,28,1,
        29,1,29,1,30,1,30,1,31,1,31,1,31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,1,0,8,2,0,9,9,32,32,2,0,60,60,62,62,2,0,43,
        43,45,45,3,0,37,37,42,42,47,47,2,0,34,34,92,92,1,0,48,57,2,0,65,
        90,97,122,6,0,34,34,92,92,98,98,110,110,114,114,116,116,246,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,69,1,0,0,0,7,72,1,0,
        0,0,9,75,1,0,0,0,11,77,1,0,0,0,13,79,1,0,0,0,15,81,1,0,0,0,17,83,
        1,0,0,0,19,85,1,0,0,0,21,87,1,0,0,0,23,90,1,0,0,0,25,95,1,0,0,0,
        27,104,1,0,0,0,29,111,1,0,0,0,31,117,1,0,0,0,33,121,1,0,0,0,35,126,
        1,0,0,0,37,129,1,0,0,0,39,140,1,0,0,0,41,162,1,0,0,0,43,168,1,0,
        0,0,45,175,1,0,0,0,47,177,1,0,0,0,49,179,1,0,0,0,51,190,1,0,0,0,
        53,193,1,0,0,0,55,205,1,0,0,0,57,215,1,0,0,0,59,223,1,0,0,0,61,225,
        1,0,0,0,63,227,1,0,0,0,65,66,5,61,0,0,66,2,1,0,0,0,67,68,5,33,0,
        0,68,4,1,0,0,0,69,70,5,38,0,0,70,71,5,38,0,0,71,6,1,0,0,0,72,73,
        5,124,0,0,73,74,5,124,0,0,74,8,1,0,0,0,75,76,5,44,0,0,76,10,1,0,
        0,0,77,78,5,59,0,0,78,12,1,0,0,0,79,80,5,40,0,0,80,14,1,0,0,0,81,
        82,5,41,0,0,82,16,1,0,0,0,83,84,5,123,0,0,84,18,1,0,0,0,85,86,5,
        125,0,0,86,20,1,0,0,0,87,88,5,105,0,0,88,89,5,102,0,0,89,22,1,0,
        0,0,90,91,5,101,0,0,91,92,5,108,0,0,92,93,5,115,0,0,93,94,5,101,
        0,0,94,24,1,0,0,0,95,96,5,102,0,0,96,97,5,117,0,0,97,98,5,110,0,
        0,98,99,5,99,0,0,99,100,5,116,0,0,100,101,5,105,0,0,101,102,5,111,
        0,0,102,103,5,110,0,0,103,26,1,0,0,0,104,105,5,114,0,0,105,106,5,
        101,0,0,106,107,5,116,0,0,107,108,5,117,0,0,108,109,5,114,0,0,109,
        110,5,110,0,0,110,28,1,0,0,0,111,112,5,119,0,0,112,113,5,104,0,0,
        113,114,5,105,0,0,114,115,5,108,0,0,115,116,5,101,0,0,116,30,1,0,
        0,0,117,118,5,102,0,0,118,119,5,111,0,0,119,120,5,114,0,0,120,32,
        1,0,0,0,121,122,5,109,0,0,122,123,5,97,0,0,123,124,5,105,0,0,124,
        125,5,110,0,0,125,34,1,0,0,0,126,127,5,46,0,0,127,36,1,0,0,0,128,
        130,7,0,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,
        132,1,0,0,0,132,133,1,0,0,0,133,134,6,18,0,0,134,38,1,0,0,0,135,
        137,5,13,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,
        141,5,10,0,0,139,141,5,13,0,0,140,136,1,0,0,0,140,139,1,0,0,0,141,
        142,1,0,0,0,142,143,6,19,0,0,143,40,1,0,0,0,144,145,5,98,0,0,145,
        146,5,111,0,0,146,147,5,111,0,0,147,163,5,108,0,0,148,149,5,105,
        0,0,149,150,5,110,0,0,150,163,5,116,0,0,151,152,5,102,0,0,152,153,
        5,108,0,0,153,154,5,111,0,0,154,155,5,97,0,0,155,163,5,116,0,0,156,
        157,5,115,0,0,157,158,5,116,0,0,158,159,5,114,0,0,159,160,5,105,
        0,0,160,161,5,110,0,0,161,163,5,103,0,0,162,144,1,0,0,0,162,148,
        1,0,0,0,162,151,1,0,0,0,162,156,1,0,0,0,163,42,1,0,0,0,164,165,5,
        61,0,0,165,169,5,61,0,0,166,167,5,33,0,0,167,169,5,61,0,0,168,164,
        1,0,0,0,168,166,1,0,0,0,169,44,1,0,0,0,170,176,7,1,0,0,171,172,5,
        62,0,0,172,176,5,61,0,0,173,174,5,60,0,0,174,176,5,61,0,0,175,170,
        1,0,0,0,175,171,1,0,0,0,175,173,1,0,0,0,176,46,1,0,0,0,177,178,7,
        2,0,0,178,48,1,0,0,0,179,180,7,3,0,0,180,50,1,0,0,0,181,182,5,116,
        0,0,182,183,5,114,0,0,183,184,5,117,0,0,184,191,5,101,0,0,185,186,
        5,102,0,0,186,187,5,97,0,0,187,188,5,108,0,0,188,189,5,115,0,0,189,
        191,5,101,0,0,190,181,1,0,0,0,190,185,1,0,0,0,191,52,1,0,0,0,192,
        194,3,59,29,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,
        196,1,0,0,0,196,203,1,0,0,0,197,199,3,35,17,0,198,200,3,59,29,0,
        199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,
        202,204,1,0,0,0,203,197,1,0,0,0,203,204,1,0,0,0,204,54,1,0,0,0,205,
        210,5,34,0,0,206,209,8,4,0,0,207,209,3,63,31,0,208,206,1,0,0,0,208,
        207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,
        213,1,0,0,0,212,210,1,0,0,0,213,214,5,34,0,0,214,56,1,0,0,0,215,
        220,3,61,30,0,216,219,3,61,30,0,217,219,3,59,29,0,218,216,1,0,0,
        0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,
        0,221,58,1,0,0,0,222,220,1,0,0,0,223,224,7,5,0,0,224,60,1,0,0,0,
        225,226,7,6,0,0,226,62,1,0,0,0,227,228,5,92,0,0,228,229,7,7,0,0,
        229,64,1,0,0,0,15,0,131,136,140,162,168,175,190,195,201,203,208,
        210,218,220,1,6,0,0
    ]

class OneLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Assign = 1
    Bang = 2
    And = 3
    Or = 4
    Comma = 5
    Semicolon = 6
    LeftParen = 7
    RightParen = 8
    LeftBrace = 9
    RightBrace = 10
    If = 11
    Else = 12
    Function = 13
    Return = 14
    While = 15
    For = 16
    Main = 17
    Dot = 18
    Whitespace = 19
    Newline = 20
    Type = 21
    EqualityOperation = 22
    ComparisonOperation = 23
    AdditionOperation = 24
    MultiplicationOperation = 25
    BoolLiteral = 26
    NumberLiteral = 27
    StringLiteral = 28
    Identifier = 29
    Digit = 30
    Letter = 31
    EscapeSequence = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'!'", "'&&'", "'||'", "','", "';'", "'('", "')'", "'{'", 
            "'}'", "'if'", "'else'", "'function'", "'return'", "'while'", 
            "'for'", "'main'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "Assign", "Bang", "And", "Or", "Comma", "Semicolon", "LeftParen", 
            "RightParen", "LeftBrace", "RightBrace", "If", "Else", "Function", 
            "Return", "While", "For", "Main", "Dot", "Whitespace", "Newline", 
            "Type", "EqualityOperation", "ComparisonOperation", "AdditionOperation", 
            "MultiplicationOperation", "BoolLiteral", "NumberLiteral", "StringLiteral", 
            "Identifier", "Digit", "Letter", "EscapeSequence" ]

    ruleNames = [ "Assign", "Bang", "And", "Or", "Comma", "Semicolon", "LeftParen", 
                  "RightParen", "LeftBrace", "RightBrace", "If", "Else", 
                  "Function", "Return", "While", "For", "Main", "Dot", "Whitespace", 
                  "Newline", "Type", "EqualityOperation", "ComparisonOperation", 
                  "AdditionOperation", "MultiplicationOperation", "BoolLiteral", 
                  "NumberLiteral", "StringLiteral", "Identifier", "Digit", 
                  "Letter", "EscapeSequence" ]

    grammarFileName = "One.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


